datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String          @unique
  password      String?
  emailVerified DateTime?
  role          String?         @default("user")
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  menuItems   MenuItem[]    @relation("UserMenuItems")
  orders      Order[]
  Category    Category[]
  UserAddress UserAddress[]
  Cart        Cart[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Restaurant Restaurant[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  userID String @db.ObjectId
  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)

  menuItems MenuItem[] @relation("CategoryMenuItems")
}

model MenuItem {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Float
  description String
  image       String

  userID String @db.ObjectId
  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade, name: "UserMenuItems")

  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, name: "CategoryMenuItems")

  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade, name: "RestaurantMenuItems")

  cartItems CartItem[]
}

model City {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique
  restaurants Restaurant[]
}

model Restaurant {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  foodType    String
  userID      String     @db.ObjectId
  cityId      String     @db.ObjectId
  
  user        User       @relation(fields: [userID], references: [id], onDelete: Cascade)
  city        City       @relation(fields: [cityId], references: [id], onDelete: Cascade)
  menu        MenuItem[] @relation("RestaurantMenuItems")
}

model Order {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String?  @db.ObjectId
  phone        String?
  cartProducts Json
  paid         Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserAddress {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String   @unique
  streetAddress String?
  postalCode    String?
  city          String?
  country       String?
  phone         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userID String @db.ObjectId
  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @db.ObjectId
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  menuItemId String   @db.ObjectId
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  quantity   Int      @default(1)
  cartId     String   @db.ObjectId
  cart       Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
